<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on Hack MySQL</title>
    <link>https://hackmysql.com/tags/mysql/</link>
    <description>Recent content in mysql on Hack MySQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2021 Daniel Nichter</copyright>
    <lastBuildDate>Thu, 14 Jan 2021 15:42:00 -0500</lastBuildDate><atom:link href="https://hackmysql.com/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL Select and Sort Status Variables</title>
      <link>https://hackmysql.com/mysql-select-and-sort/</link>
      <pubDate>Thu, 14 Jan 2021 15:42:00 -0500</pubDate>

      <guid>https://hackmysql.com/mysql-select-and-sort/</guid>
      <description>MySQL Select and Sort Status Variables This page is a reboot of the original written 15 years ago in 2005. Back then, I must have been using MySQL 4.1 or 5.0. Today, I am using MySQL 8.0.22. A lot changed in MySQL from 4.1 to 8.0, but it still has the same Select_% and Sort_% status variables which are equally important today in 2021. Let&amp;rsquo;s examine them in greater detail and with better examples.</description>
    </item>

    <item>
      <title>MySQL Password Rotation with AWS</title>
      <link>https://hackmysql.com/post/mysql-password-rotation-with-aws-and-terraform/</link>
      <pubDate>Mon, 28 Dec 2020 12:09:00 -0500</pubDate>

      <guid>https://hackmysql.com/post/mysql-password-rotation-with-aws-and-terraform/</guid>
      <description>If you run MySQL on Amazon RDS and use passwords, I sure hope you frequently rotate those passwords (among many other security best practices). But if you don&amp;rsquo;t rotate them, I might know why: it&amp;rsquo;s quite difficult to set up when you really get into it. It seems easy at first, but if you&amp;rsquo;ve ever tried you know how quickly it becomes complicated. At least, that was my experience. So to help others overcome the challenges and do frequent password rotation, I wrote up a long read: MySQL Password Rotation with AWS Secrets Manager and Lambda.</description>
    </item>

    <item>
      <title>MySQL Password Rotation with AWS Secrets Manager and Lambda</title>
      <link>https://hackmysql.com/mysql-password-rotation-lambda/</link>
      <pubDate>Mon, 28 Dec 2020 09:56:00 -0500</pubDate>

      <guid>https://hackmysql.com/mysql-password-rotation-lambda/</guid>
      <description>MySQL Password Rotation with AWS Secrets Manager and Lambda MySQL password rotation using Amazon RDS for MySQL, AWS Secrets Manager, and AWS Lambda is a complex challenge to automate at scale. It appears easy at first—just two services and some IAM resources, right? But actual implementation quickly reveals a significant depth of considerations, choices, trade-offs, and technical problems. This page is a detailed guide to implementing MySQL 5.7 password rotation—fully automated at scale—using AWS RDS, Secrets Manager, and Lambda, and Terraform for cloud infrastructure.</description>
    </item>

    <item>
      <title>Query Metrics Requirements for MySQL</title>
      <link>https://hackmysql.com/post/query-metrics-requirements-for-mysql/</link>
      <pubDate>Sun, 01 Nov 2020 20:25:00 -0500</pubDate>

      <guid>https://hackmysql.com/post/query-metrics-requirements-for-mysql/</guid>
      <description>Let&amp;rsquo;s answer a question which, to my knowledge, has never been systematically addressed: What are the requirements for a production-ready query metrics app at scale? I am uniquely qualified to answer that because I have written four query metrics apps, two of which are the open-source standard for MySQL: pt-query-digest and the original (v1) code behind the query metrics/analysis part of Percona Monitoring and Management. I&amp;rsquo;ve also published a couple of packages related to query metrics: go-mysql/slowlog and go-mysql/query.</description>
    </item>

    <item>
      <title>What the Flush?</title>
      <link>https://hackmysql.com/post/what-the-flush-mysql-dirty-pages/</link>
      <pubDate>Sun, 05 Jul 2020 18:50:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/what-the-flush-mysql-dirty-pages/</guid>
      <description>&lt;p&gt;Yves Trudeau and Francisco Bordenave, MySQL experts at Percona, recently published a three-part post:
(1) &lt;a href=&#34;https://www.percona.com/blog/2019/12/18/give-love-to-your-ssds-reduce-innodb_io_capacity_max/&#34;&gt;Give Love to Your SSDs – Reduce innodb_io_capacity_max!&lt;/a&gt;;
(2) &lt;a href=&#34;https://www.percona.com/blog/2020/01/22/innodb-flushing-in-action-for-percona-server-for-mysql/&#34;&gt;InnoDB Flushing in Action for Percona Server for MySQL&lt;/a&gt;;
(3) &lt;a href=&#34;https://www.percona.com/blog/2020/05/14/tuning-mysql-innodb-flushing-for-a-write-intensive-workload/&#34;&gt;Tuning MySQL/InnoDB Flushing for a Write-Intensive Workload&lt;/a&gt;. It&amp;rsquo;s a fantastic read from start to finish, and it made me realize: dirty pages sound bad, but they are good. I suspect the opposite (&amp;ldquo;dirty pages are &lt;em&gt;not&lt;/em&gt; good&amp;rdquo;) is a misconception due to an incomplete picture. Let&amp;rsquo;s complete the picture.&lt;/p&gt;</description>
    </item>

    <item>
      <title>21 Parameter Group Values to Change in Amazon RDS for MySQL</title>
      <link>https://hackmysql.com/post/21-parameter-group-values-to-change-in-amazon-rds-for-mysql/</link>
      <pubDate>Mon, 29 Jun 2020 11:15:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/21-parameter-group-values-to-change-in-amazon-rds-for-mysql/</guid>
      <description>Amazon RDS for MySQL uses many default values for system variables, but it also sets a few &amp;ldquo;sys vars&amp;rdquo; with different values. As with any database, neither product (MySQL) nor provider (AWS) defaults can best suite all use cases. It&amp;rsquo;s our responsibility to carefully review and set every important system variable. This is tedious and difficult, but I&amp;rsquo;ve done it for you.
Below are are 21 MySQL 5.7 system variables that I recommend changing by creating a new parameter group.</description>
    </item>

    <item>
      <title>Missing Writes with MySQL GTID</title>
      <link>https://hackmysql.com/post/mysql-gtid-missing-writes/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/mysql-gtid-missing-writes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/replication-gtids.html&#34;&gt;GTID-based replication&lt;/a&gt; makes managing replication topology easy: just &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html&#34;&gt;CHANGE MASTER&lt;/a&gt; to any node and voilà. It &lt;a href=&#34;https://hackmysql.com/post/fixing-ghosted-gtids/&#34;&gt;doesn&amp;rsquo;t always work&lt;/a&gt;, but for the most part it does. That&amp;rsquo;s great, but it can hide a serious problem: missing writes. Even when MySQL GTID-based replication says, &amp;ldquo;OK, sure!&amp;rdquo;, which is most of the time, you should double check it.&lt;/p&gt;</description>
    </item>

    <item>
      <title>MySQL Threads Running</title>
      <link>https://hackmysql.com/post/mysql-threads-running-how-hard-is-mysql-working/</link>
      <pubDate>Sat, 25 Apr 2020 16:18:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/mysql-threads-running-how-hard-is-mysql-working/</guid>
      <description>&lt;p&gt;Queries per second (QPS) measures database throughput, but it does not reflect how hard MySQL is working. The latter is measured by &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html#statvar_Threads_running&#34;&gt;Threads_running&lt;/a&gt;&lt;/em&gt;, expressed as a gauge (whereas QPS is a rate). Before discussing &lt;em&gt;Threads_running&lt;/em&gt;, let&amp;rsquo;s consider an analogy:&lt;/p&gt;</description>
    </item>

    <item>
      <title>Queries Effect Performance</title>
      <link>https://hackmysql.com/post/queries-effect-performance/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/queries-effect-performance/</guid>
      <description>Queries effect database performance. That&amp;rsquo;s not a typo: &amp;ldquo;effect&amp;rdquo; not &amp;ldquo;affect&amp;rdquo;. The difference is not a word game but an important way to think about database performance.
Many things can affect performance. For example, if the system runs out of memory then starts swapping which causes high disk IO latency, that will negatively affect performance. But external factors like that notwithstanding (i.e. when hardware and MySQL are normal and stable), it&amp;rsquo;s important to understand that queries effect performance.</description>
    </item>

    <item>
      <title>Fixing Ghosted GTIDs</title>
      <link>https://hackmysql.com/post/fixing-ghosted-gtids/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/fixing-ghosted-gtids/</guid>
      <description>MySQL auto-positioning is an integral part of replication with GTID, but it&amp;rsquo;s neither required nor guaranteed to work. It&amp;rsquo;s possible to enable GTIDs but disable auto-positioning, and it&amp;rsquo;s possible that one MySQL instance cannot auto-position on another even when GTIDs are used. The former (GTID on but auto-pos off) is an issue for another time. The latter is the topic of this post: when MySQL GTID auto-positioning fails—and how to fix it.</description>
    </item>

    <item>
      <title>When MySQL Goes Away</title>
      <link>https://hackmysql.com/post/when-mysql-goes-away/</link>
      <pubDate>Sun, 22 Jul 2018 18:00:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/when-mysql-goes-away/</guid>
      <description>Handling MySQL errors in Go is not easy. There are a lot of MySQL server error codes, and the Go MySQL driver as its own errors, and Go database/sql has its own errors, and errors can bubble up from other packages, like net.OpError. Consequently, Go programs tend not to handle errors. Instead, they simply report errors:
err := db.Query(...).Scan(&amp;amp;v) if err != nil { return err }  And then the error is logged or reported somewhere.</description>
    </item>

    <item>
      <title>Crash-safe MySQL Replication</title>
      <link>https://hackmysql.com/post/crash-safe-mysql-replication-a-visual-guide/</link>
      <pubDate>Tue, 23 Jan 2018 18:40:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/crash-safe-mysql-replication-a-visual-guide/</guid>
      <description>MySQL crash-safe replication is an old feature (~4 years as of MySQL 5.6), but it&amp;rsquo;s not consistently understood or applied. The MySQL manual on the topic, 16.3.2 Handling an Unexpected Halt of a Replication Slave, is correct and authoritative, but unless you grok MySQL replication that page doesn&amp;rsquo;t make it obvious why crash-safe replication works. Other blog posts explain why, but sometimes add other considerations, making it unclear which settings are necessary and sufficient.</description>
    </item>

  </channel>
</rss>
