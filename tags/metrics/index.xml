<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metrics on Hack MySQL</title>
    <link>https://hackmysql.com/tags/metrics/</link>
    <description>Recent content in metrics on Hack MySQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2022 Daniel Nichter</copyright>
    <lastBuildDate>Sat, 25 Apr 2020 16:18:00 -0300</lastBuildDate><atom:link href="https://hackmysql.com/tags/metrics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL Threads Running</title>
      <link>https://hackmysql.com/post/mysql-threads-running-how-hard-is-mysql-working/</link>
      <pubDate>Sat, 25 Apr 2020 16:18:00 -0300</pubDate>
      
      <guid>https://hackmysql.com/post/mysql-threads-running-how-hard-is-mysql-working/</guid>
      <description>&lt;p&gt;Queries per second (QPS) measures database throughput, but it does not reflect how hard MySQL is working. The latter is measured by &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html#statvar_Threads_running&#34;&gt;Threads_running&lt;/a&gt;&lt;/em&gt;, expressed as a gauge (whereas QPS is a rate). Before discussing &lt;em&gt;Threads_running&lt;/em&gt;, let&amp;rsquo;s consider an analogy:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Response Time SLA</title>
      <link>https://hackmysql.com/post/response-time-sla/</link>
      <pubDate>Sat, 29 Jun 2019 19:00:00 -0300</pubDate>
      
      <guid>https://hackmysql.com/post/response-time-sla/</guid>
      <description>Response time (or latency) percentiles are a ubiquitous measure of system performance. The P999 (99.9th percentile) is a high bar, so it&amp;rsquo;s a good metric to determine an SLA. For example, my team runs a system with an 800 millisecond response time SLA determined by the P999. To meet that SLA, 99.9% of all requests must take &amp;lt;= 800ms. The system meets the SLA, but here&amp;rsquo;s its P999 graph:
Looks bad, but the system is meeting the SLA.</description>
    </item>
    
    <item>
      <title>Path and Dimension Metrics</title>
      <link>https://hackmysql.com/post/path-and-dimension-metrics/</link>
      <pubDate>Fri, 12 Apr 2019 09:00:00 -0400</pubDate>
      
      <guid>https://hackmysql.com/post/path-and-dimension-metrics/</guid>
      <description>The two most common strategies for identifying and organizing data points that comprise metric time series are path and dimension. This post is geared towards engineers who have never been introduced to the subject. Implementing metrics from the ground up, or adding new metrics to an existing system, can be overwhelming in nontrivial systems. Understanding these two strategies simplifies one&amp;rsquo;s efforts.
Path-based Metrics Path-based metrics are the historical norm:
host.prod1.disk-free.sda host.</description>
    </item>
    
    <item>
      <title>Percentiles</title>
      <link>https://hackmysql.com/eng/percentiles/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hackmysql.com/eng/percentiles/</guid>
      <description>Percentiles Percentiles are ubiquitous in application performance monitoring, particularly the 95th (P95), 99th (P99), and 99.9th (P999) percentiles. The basic concept is simple: percentile Pn means n% of all values are &amp;lt;= than the Pn value. If the P95 value = 100ms, then 95% of all values are &amp;lt;= 100ms. In other words: 5% of all values are &amp;gt; 100ms. Percentiles discard the top (100-n)% values as outliers for various reasons which are outside the scope of this page.</description>
    </item>
    
  </channel>
</rss>
