<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>variable-naming on Hack MySQL</title>
    <link>https://hackmysql.com/tags/variable-naming/</link>
    <description>Recent content in variable-naming on Hack MySQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2022 Daniel Nichter</copyright>
    <lastBuildDate>Fri, 25 Mar 2022 16:55:00 -0400</lastBuildDate><atom:link href="https://hackmysql.com/tags/variable-naming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Single-character Names</title>
      <link>https://hackmysql.com/golang/go-single-character-names/</link>
      <pubDate>Fri, 25 Mar 2022 16:55:00 -0400</pubDate>
      
      <guid>https://hackmysql.com/golang/go-single-character-names/</guid>
      <description>Go Single-character Names Go loves short names. Even the authoritative page Effective Go uses this example:
f, err := os.Open(name) if err != nil { return err } d, err := f.Stat() if err != nil { f.Close() return err } codeUsing(f, d) Short names are idiomatic Go, but overusing them creates cryptic, difficult-to-read code that is not idiomatic because, above all, Go is optimized for reading, especially by future engineers.</description>
    </item>
    
  </channel>
</rss>
