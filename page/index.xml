<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on Hack MySQL</title>
    <link>https://hackmysql.com/page/</link>
    <description>Recent content in Pages on Hack MySQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2020 Daniel Nichter</copyright>
    <lastBuildDate>Fri, 11 Dec 2020 00:00:00 +0000</lastBuildDate>

	<atom:link href="https://hackmysql.com/page/index.xml" rel="self" type="application/rss+xml" />


    <item>
      <title>About</title>
      <link>https://hackmysql.com/page/about/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/page/about/</guid>
      <description>Hack MySQL Hack MySQL is my personal blog about MySQL, the Go programming language, and software design.
The content of this site is inspired by two things. First is my job at Square. Working with thousands of databases, hundreds of microservices, and engineers across the company, I&amp;rsquo;m fortunate to always have new challenges and opportunities to both learn and mentor. A lot of the posts and pages began as conversations with colleagues.</description>
    </item>

    <item>
      <title>Percentiles</title>
      <link>https://hackmysql.com/page/percentiles/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/page/percentiles/</guid>
      <description>Percentiles Percentiles are ubiquitous in application performance monitoring, particularly the 95th (P95), 99th (P99), and 99.9th (P999) percentiles. The basic concept is simple: percentile Pn means n% of all values are &amp;lt;= than the Pn value. If the P95 value = 100ms, then 95% of all values are &amp;lt;= 100ms. In other words: 5% of all values are &amp;gt; 100ms. Percentiles discard the top (100-n)% values as outliers for various reasons which are outside the scope of this page.</description>
    </item>

    <item>
      <title>Command-line Interface Antipatterns</title>
      <link>https://hackmysql.com/page/cli-antipatterns/</link>
      <pubDate>Sun, 21 Jan 2018 19:00:00 -0700</pubDate>

      <guid>https://hackmysql.com/page/cli-antipatterns/</guid>
      <description>Command-line Interface Antipatterns Apps (web, mobile, and native) and APIs do not lessen the need or importance of command-line tools. A beautifully designed command-line user experience is arguably more important and than a graphical UX because the command line is deceptively simple: text on a screen. Wielding mere text on screen is an art akin to wielding mere paint on canvas. This page documents what I believe to be command-line interface (CLI) antipatterns which, in the long or short run, detract from both UX and developer effectiveness.</description>
    </item>

    <item>
      <title>Go Antipatterns</title>
      <link>https://hackmysql.com/page/golang-antipatterns/</link>
      <pubDate>Sat, 03 Jun 2017 18:51:14 -0700</pubDate>

      <guid>https://hackmysql.com/page/golang-antipatterns/</guid>
      <description>Go Antipatterns These Go lang antipatterns are inspired by SQL Antipatterns. Antipattern Go code is syntactically correct, but there&amp;rsquo;s a better way that&amp;rsquo;s both functionally equivalent and idiomatic.
These are guidelines not absolutes. For example, Generic Package is common in practice and often difficult to avoid. Spending significant time trying to rename a util package can quickly amount to bikeshedding. Therefore, the antipatterns are divided into three classes: critical, important, and stylistic.</description>
    </item>

    <item>
      <title>Idiomatic Go</title>
      <link>https://hackmysql.com/page/idiomatic-go/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/page/idiomatic-go/</guid>
      <description>Idiomatic Go Canon can·on /ˈkanən/ noun : a general law, rule, principle, or criterion by which something is judged
These texts explicitly and implicitly define idiomatic Go code. Read, memorize, and refer to them often. Use them to settle debates.
 Effective Go Golang FAQ Go at Google: Language Design in the Service of Software Engineering Go Standard Library Packages Godoc: documenting Go code Go Package Names  Recommended  Go Code Review Comments Best practices for a new Go developer Reducing Type Hierarchies  </description>
    </item>

  </channel>
</rss>
