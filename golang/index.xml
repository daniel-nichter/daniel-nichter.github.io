<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golangs on Hack MySQL</title>
    <link>https://hackmysql.com/golang/</link>
    <description>Recent content in Golangs on Hack MySQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2022 Daniel Nichter</copyright>
    <lastBuildDate>Fri, 25 Mar 2022 16:55:00 -0400</lastBuildDate><atom:link href="https://hackmysql.com/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Single-character Names</title>
      <link>https://hackmysql.com/golang/go-single-character-names/</link>
      <pubDate>Fri, 25 Mar 2022 16:55:00 -0400</pubDate>
      
      <guid>https://hackmysql.com/golang/go-single-character-names/</guid>
      <description>Go Single-character Names Go loves short names. Even the authoritative page Effective Go uses this example:
f, err := os.Open(name) if err != nil { return err } d, err := f.Stat() if err != nil { f.Close() return err } codeUsing(f, d)  Short names are idiomatic Go, but overusing them creates cryptic, difficult-to-read code that is not idiomatic because, above all, Go is optimized for reading, especially by future engineers.</description>
    </item>
    
    <item>
      <title>Go Antipatterns</title>
      <link>https://hackmysql.com/golang/go-antipatterns/</link>
      <pubDate>Sat, 03 Jun 2017 18:51:14 -0700</pubDate>
      
      <guid>https://hackmysql.com/golang/go-antipatterns/</guid>
      <description>Go Antipatterns These Go lang antipatterns are inspired by SQL Antipatterns. Antipattern Go code is syntactically correct, but there&amp;rsquo;s a better way that&amp;rsquo;s both functionally equivalent and idiomatic.
These are guidelines not absolutes. For example, Generic Package is common in practice and often difficult to avoid. Spending significant time trying to rename a util package can quickly amount to bikeshedding. Therefore, the antipatterns are divided into three classes: critical, important, and stylistic.</description>
    </item>
    
    <item>
      <title>Idiomatic Go</title>
      <link>https://hackmysql.com/golang/idiomatic-go/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hackmysql.com/golang/idiomatic-go/</guid>
      <description>Idiomatic Go Canon can·on /ˈkanən/ noun : a general law, rule, principle, or criterion by which something is judged
These texts explicitly and implicitly define idiomatic Go code. Read, memorize, and refer to them often. Use them to settle debates.
 Effective Go Golang FAQ Go at Google: Language Design in the Service of Software Engineering Go Standard Library Packages Godoc: documenting Go code Go Package Names  Recommended  Go Code Review Comments Best practices for a new Go developer Reducing Type Hierarchies  </description>
    </item>
    
  </channel>
</rss>
