<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hack MySQL</title>
    <link>https://hackmysql.com/</link>
    <description>Recent content on Hack MySQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2020 Daniel Nichter</copyright>
    <lastBuildDate>Mon, 29 Jun 2020 11:15:00 -0300</lastBuildDate>

	<atom:link href="https://hackmysql.com/index.xml" rel="self" type="application/rss+xml" />


    <item>
      <title>21 Parameter Group Values to Change in Amazon RDS for MySQL</title>
      <link>https://hackmysql.com/post/21-parameter-group-values-to-change-in-amazon-rds-for-mysql/</link>
      <pubDate>Mon, 29 Jun 2020 11:15:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/21-parameter-group-values-to-change-in-amazon-rds-for-mysql/</guid>
      <description>Amazon RDS for MySQL uses many default values for system variables, but it also sets a few &amp;ldquo;sys vars&amp;rdquo; with different values. As with any database, neither product (MySQL) nor provider (AWS) defaults can best suite all use cases. It&amp;rsquo;s our responsibility to carefully review and set every important system variable. This is tedious and difficult, but I&amp;rsquo;ve done it for you.
Below are are 21 MySQL 5.7 system variables that I recommend changing by creating a new parameter group.</description>
    </item>

    <item>
      <title>Missing Writes with MySQL GTID</title>
      <link>https://hackmysql.com/post/mysql-gtid-missing-writes/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/mysql-gtid-missing-writes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/replication-gtids.html&#34;&gt;GTID-based replication&lt;/a&gt; makes managing replication topology easy: just &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/change-master-to.html&#34;&gt;CHANGE MASTER&lt;/a&gt; to any node and voilà. It &lt;a href=&#34;https://hackmysql.com/post/fixing-ghosted-gtids/&#34;&gt;doesn&amp;rsquo;t always work&lt;/a&gt;, but for the most part it does. That&amp;rsquo;s great, but it can hide a serious problem: missing writes. Even when MySQL GTID-based replication says, &amp;ldquo;OK, sure!&amp;quot;, which is most of the time, you should double check it.&lt;/p&gt;</description>
    </item>

    <item>
      <title>mysqlreport</title>
      <link>https://hackmysql.com/archive/mysqlreport/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/archive/mysqlreport/</guid>
      <description>mysqlreport The mysqlreport script has been archived. It is no longer developed or supported.
You can download it from https://github.com/daniel-nichter/hackmysql.com/tree/master/mysqlreport.</description>
    </item>

    <item>
      <title>mysqlsla</title>
      <link>https://hackmysql.com/archive/mysqlsla/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/archive/mysqlsla/</guid>
      <description>mysqlsla The mysqlsla script has been archived. It is no longer developed or supported.
You can download it from https://github.com/daniel-nichter/hackmysql.com/tree/master/mysqlsla.</description>
    </item>

    <item>
      <title>mysqlsniffer</title>
      <link>https://hackmysql.com/archive/mysqlsniffer/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/archive/mysqlsniffer/</guid>
      <description>mysqlsniffer The mysqlsniffer program has been archived. It is no longer developed or supported.
You can download it from https://github.com/daniel-nichter/hackmysql.com/tree/master/mysqlsniffer.</description>
    </item>

    <item>
      <title>MySQL Threads Running</title>
      <link>https://hackmysql.com/post/mysql-threads-running-how-hard-is-mysql-working/</link>
      <pubDate>Sat, 25 Apr 2020 16:18:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/mysql-threads-running-how-hard-is-mysql-working/</guid>
      <description>&lt;p&gt;Queries per second (QPS) measures database throughput, but it does not reflect how hard MySQL is working. The latter is measured by &lt;em&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html#statvar_Threads_running&#34;&gt;Threads_running&lt;/a&gt;&lt;/em&gt;, expressed as a gauge (whereas QPS is a rate). Before discussing &lt;em&gt;Threads_running&lt;/em&gt;, let&amp;rsquo;s consider an analogy:&lt;/p&gt;</description>
    </item>

    <item>
      <title>About</title>
      <link>https://hackmysql.com/page/about/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/page/about/</guid>
      <description>Hack MongoMySQL Hack MongoMySQL is my personal blog about databases, the Go programming language, and software design.
In 2017, I started hackmongo.com thinking that I would do more work with MongoDB—a new frontier for me—but in the last three years I have continued to work with MySQL. Moreover, in the five years since I stopped HackMySQL.com (2005-2015), I have seen an increasing gap between MySQL advancements and free, independent MySQL knowledge and tools.</description>
    </item>

    <item>
      <title>Queries Effect Performance</title>
      <link>https://hackmysql.com/post/queries-effect-performance/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/queries-effect-performance/</guid>
      <description>Queries effect database performance. That&amp;rsquo;s not a typo: &amp;ldquo;effect&amp;rdquo; not &amp;ldquo;affect&amp;rdquo;. The difference is not a word game but an important way to think about database performance.
Many things can affect performance. For example, if the system runs out of memory then starts swapping which causes high disk IO latency, that will negatively affect performance. But external factors like that notwithstanding (i.e. when hardware and MySQL are normal and stable), it&amp;rsquo;s important to understand that queries effect performance.</description>
    </item>

    <item>
      <title>Fixing Ghosted GTIDs</title>
      <link>https://hackmysql.com/post/fixing-ghosted-gtids/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/fixing-ghosted-gtids/</guid>
      <description>MySQL auto-positioning is an integral part of replication with GTID, but it&amp;rsquo;s neither required nor guaranteed to work. It&amp;rsquo;s possible to enable GTIDs but disable auto-positioning, and it&amp;rsquo;s possible that one MySQL instance cannot auto-position on another even when GTIDs are used. The former (GTID on but auto-pos off) is an issue for another time. The latter is the topic of this post: when MySQL GTID auto-positioning fails—and how to fix it.</description>
    </item>

    <item>
      <title>Response Time SLA</title>
      <link>https://hackmysql.com/post/response-time-sla/</link>
      <pubDate>Sat, 29 Jun 2019 19:00:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/response-time-sla/</guid>
      <description>Response time (or latency) percentiles are a ubiquitous measure of system performance. The P999 (99.9th percentile) is a high bar, so it&amp;rsquo;s a good metric to determine an SLA. For example, my team runs a system with an 800 millisecond response time SLA determined by the P999. To meet that SLA, 99.9% of all requests must take &amp;lt;= 800ms. The system meets the SLA, but here&amp;rsquo;s its P999 graph:
Looks bad, but the system is meeting the SLA.</description>
    </item>

    <item>
      <title>Path and Dimension Metrics</title>
      <link>https://hackmysql.com/post/path-and-dimension-metrics/</link>
      <pubDate>Fri, 12 Apr 2019 09:00:00 -0400</pubDate>

      <guid>https://hackmysql.com/post/path-and-dimension-metrics/</guid>
      <description>The two most common strategies for identifying and organizing data points that comprise metric time series are path and dimension. This post is geared towards engineers who have never been introduced to the subject. Implementing metrics from the ground up, or adding new metrics to an existing system, can be overwhelming in nontrivial systems. Understanding these two strategies simplifies one&amp;rsquo;s efforts.
Path-based Metrics Path-based metrics are the historical norm:
host.prod1.disk-free.sda host.</description>
    </item>

    <item>
      <title>3 Golang Error Types</title>
      <link>https://hackmysql.com/post/three-golang-error-types/</link>
      <pubDate>Mon, 25 Mar 2019 11:00:00 -0400</pubDate>

      <guid>https://hackmysql.com/post/three-golang-error-types/</guid>
      <description>This is not a post about Go error handling, it&amp;rsquo;s a post about Go error &amp;ldquo;types&amp;rdquo;: three different ways to construct and use the built-in error interface type. error is deceptively simple. When used in the ways described here, it allows us to design meaningful errors and error handling in large Go programs. Errors should be first-class citizens because when things break (and they always do), errors are the first—and often only—information we have.</description>
    </item>

    <item>
      <title>Percentiles</title>
      <link>https://hackmysql.com/page/percentiles/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/page/percentiles/</guid>
      <description>Percentiles Percentiles are ubiquitous in application performance monitoring, particularly the 95th (P95), 99th (P99), and 99.9th (P999) percentiles. The basic concept is simple: percentile Pn means n% of all values are &amp;lt;= than the Pn value. If the P95 value = 100ms, then 95% of all values are &amp;lt;= 100ms. In other words: 5% of all values are &amp;gt; 100ms. Percentiles discard the top (100-n)% values as outliers for various reasons which are outside the scope of this page.</description>
    </item>

    <item>
      <title>3 Golang Channel Red Flags</title>
      <link>https://hackmysql.com/post/three-golang-channel-red-flags/</link>
      <pubDate>Sun, 16 Dec 2018 13:00:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/three-golang-channel-red-flags/</guid>
      <description>Red Flag 1: More Than One close() When reviewing code that uses channels, first thing I do is search for close() on every channel. More than one close() is red flag because, unless all uses of the channel are carefully written and tested, it can lead to a panic on close of closed channel. It can also lead to strange behavior or subtle bugs because the code that didn&amp;rsquo;t close the channel isn&amp;rsquo;t aware the channel is closed, so send and receive on the closed channel don&amp;rsquo;t have the intended effect.</description>
    </item>

    <item>
      <title>Component-based Software Design</title>
      <link>https://hackmysql.com/post/component-based-software-design/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/component-based-software-design/</guid>
      <description>Software systems are difficult to design because code does not delineate and organize itself. Even experienced engineers can struggle to design a system because there are many solutions but it&amp;rsquo;s not clear which is the best. Compounding the difficulty: engineers know that code can work fine even if, internally, it&amp;rsquo;s an unorganized highly-entangled mess. We want code to be well-organized, but we don&amp;rsquo;t know how to make it so. Component-based design is the solution.</description>
    </item>

    <item>
      <title>When MySQL Goes Away</title>
      <link>https://hackmysql.com/post/when-mysql-goes-away/</link>
      <pubDate>Sun, 22 Jul 2018 18:00:00 -0300</pubDate>

      <guid>https://hackmysql.com/post/when-mysql-goes-away/</guid>
      <description>Handling MySQL errors in Go is not easy. There are a lot of MySQL server error codes, and the Go MySQL driver as its own errors, and Go database/sql has its own errors, and errors can bubble up from other packages, like net.OpError. Consequently, Go programs tend not to handle errors. Instead, they simply report errors:
err := db.Query(...).Scan(&amp;amp;v) if err != nil { return err } And then the error is logged or reported somewhere.</description>
    </item>

    <item>
      <title>Thinking in Go</title>
      <link>https://hackmysql.com/post/thinking-in-go/</link>
      <pubDate>Sun, 13 May 2018 09:00:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/thinking-in-go/</guid>
      <description>After learning Go, it is necessary to think in Go in order to design and implement well-written, idiomatic Go. This blog post outlines aspects that I think are important for thinking in Go. A full exploration of these aspects could fill a book, but this only an orientation for experienced programmers new to Go.
Programming languages have aspects which affect how we think, design, and implement software with the language: syntax, documentation, features/capabilities, language type (object-oriented, functional, compiled, etc.</description>
    </item>

    <item>
      <title>Bootloader Design Pattern</title>
      <link>https://hackmysql.com/post/bootloader-design-pattern/</link>
      <pubDate>Sun, 04 Feb 2018 19:30:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/bootloader-design-pattern/</guid>
      <description>Extensibility is a lofty goal for software design, and difficult to achieve. The Wikipedia article notes:
 Extensible design in software engineering is to accept that not everything can be designed in advance.
 That&amp;rsquo;s a paradox because it entails that extensible design does not accept that extensibility can be designed in advance! Fortunately, there&amp;rsquo;s at least one solution that can be intentionally designed and implemented in advance. I call it the &amp;ldquo;Bootloader&amp;rdquo; design pattern.</description>
    </item>

    <item>
      <title>Database Scalability: Contention and Crosstalk</title>
      <link>https://hackmysql.com/post/database-scalability-contention-and-crosstalk/</link>
      <pubDate>Sun, 28 Jan 2018 11:20:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/database-scalability-contention-and-crosstalk/</guid>
      <description>New engineers might not know and experienced engineers might not believe that database systems do not and cannot scale gracefully to 100% system capacity but, rather and counterintutively, exhibit retrograde performance at some point less than 100% system capacity. The reasonable presumption is:
We presume that a database can scale to almost 100% of system capacity, and max performance is a small fraction at the very top (right, orange slice) because, after all, the system itself needs some resources to run itself.</description>
    </item>

    <item>
      <title>Crash-safe MySQL Replication</title>
      <link>https://hackmysql.com/post/crash-safe-mysql-replication-a-visual-guide/</link>
      <pubDate>Tue, 23 Jan 2018 18:40:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/crash-safe-mysql-replication-a-visual-guide/</guid>
      <description>MySQL crash-safe replication is an old feature (~4 years as of MySQL 5.6), but it&amp;rsquo;s not consistently understood or applied. The MySQL manual on the topic, 16.3.2 Handling an Unexpected Halt of a Replication Slave, is correct and authoritative, but unless you grok MySQL replication that page doesn&amp;rsquo;t make it obvious why crash-safe replication works. Other blog posts explain why, but sometimes add other considerations, making it unclear which settings are necessary and sufficient.</description>
    </item>

    <item>
      <title>Command-line Interface Antipatterns</title>
      <link>https://hackmysql.com/page/cli-antipatterns/</link>
      <pubDate>Sun, 21 Jan 2018 19:00:00 -0700</pubDate>

      <guid>https://hackmysql.com/page/cli-antipatterns/</guid>
      <description>Command-line Interface Antipatterns Apps (web, mobile, and native) and APIs do not lessen the need or importance of command-line tools. A beautifully designed command-line user experience is arguably more important and than a graphical UX because the command line is deceptively simple: text on a screen. Wielding mere text on screen is an art akin to wielding mere paint on canvas. This page documents what I believe to be command-line interface (CLI) antipatterns which, in the long or short run, detract from both UX and developer effectiveness.</description>
    </item>

    <item>
      <title>Tech Workers Are Good People</title>
      <link>https://hackmysql.com/post/tech-workers-are-good-people/</link>
      <pubDate>Sun, 31 Dec 2017 09:50:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/tech-workers-are-good-people/</guid>
      <description>The Other Tech Bubble is a provocative and interesting read. The author clearly has a lot of experience with Silicon Valley and has done their homework. There are many good insights, like &amp;ldquo;They&amp;rsquo;re still asking if it&amp;rsquo;s possible to do something, and not whether they should.&amp;rdquo; But there are two claims and one ambiguity that need to be addressed.
Villains The first claim is:
 In 2008, it was Wall Street bankers.</description>
    </item>

    <item>
      <title>Approaching a New Software Project</title>
      <link>https://hackmysql.com/post/approaching-a-new-software-project/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/approaching-a-new-software-project/</guid>
      <description>Approaching a new software project is difficult for two reasons. First, there&amp;rsquo;s no &amp;ldquo;guiding star&amp;rdquo;, no objective starting point. The developer can begin from and proceed in many directions, which makes choosing difficult. They want to proceed in a good direction from the start, not wasting time or effort, but how can they make a good choice without a guide or the benefit of experience? Being forced to choose and move ahead, the choice is often made randomly rather than methodically.</description>
    </item>

    <item>
      <title>Ideas, Leaders, and Engineers</title>
      <link>https://hackmysql.com/post/ideas-leaders-and-engineers/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/ideas-leaders-and-engineers/</guid>
      <description>The Senior Engineer&amp;rsquo;s Guide to Helping Others Make Decisions is a good read and good advice. I would summarize the advice as:
 &amp;ldquo;Seek first to understand, then to be understood&amp;rdquo; (Dr. Stephen Covey) Lead and guide, don&amp;rsquo;t micromanage Embrace change, which entails embracing other people&amp;rsquo;s thinking and way of doing things  In the first dialog, the senior engineer fails those three points.
Av&amp;rsquo;s blog post made me think&amp;hellip;</description>
    </item>

    <item>
      <title>Five-Point Checklist for Excellent Software</title>
      <link>https://hackmysql.com/post/five-point-checklist-for-excellent-software/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/five-point-checklist-for-excellent-software/</guid>
      <description>I&amp;rsquo;ve never met a developer who hasn&amp;rsquo;t read or reviewed a lot of code written by other developers. If there&amp;rsquo;s one truism in the field of software of engineering it&amp;rsquo;s that the process is collaborative. Unless you write and never release software, other people will read the code, and they&amp;rsquo;re most likely reading it not for a fun bedtime story but because they need to understand and probably fix or modify it.</description>
    </item>

    <item>
      <title>Designing Tools for Integration</title>
      <link>https://hackmysql.com/post/designing-tools-for-integration/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/designing-tools-for-integration/</guid>
      <description>When we write a new tool to do X, it&amp;rsquo;s common to program the tool to do X in one way. When X is trivial or very narrow in scope, this makes sense, and programming any more would fall prey to over-engineering. However, when the tool does many things (all logically related, else it falls prey to bloat and/or feature-creep), there quickly becomes many ways to accomplish those many things. No problem, we program all those things, too, but during my tool-making career I&amp;rsquo;ve learned two things:</description>
    </item>

    <item>
      <title>How To Test the Database</title>
      <link>https://hackmysql.com/post/how-to-test-the-database/</link>
      <pubDate>Sun, 20 Aug 2017 11:20:00 -0700</pubDate>

      <guid>https://hackmysql.com/post/how-to-test-the-database/</guid>
      <description>&amp;ldquo;How do I test the database?&amp;rdquo; is a question I&amp;rsquo;ve been asked by colleagues many times. There&amp;rsquo;s a good, clean solution, but let&amp;rsquo;s first step back from what seems to be the problem to unpack why &amp;ldquo;testing the database&amp;rdquo; is not special (but nonetheless important). In other words: colleagues don&amp;rsquo;t ask, &amp;ldquo;How do I test such-and-such package?&amp;quot;, because that&amp;rsquo;s common and well understood. The question about testing the database implies that the database is a special beast that, if not treated properly, will devour the developer in their sleep.</description>
    </item>

    <item>
      <title>Design Before Implementation</title>
      <link>https://hackmysql.com/post/design-before-implementation/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/design-before-implementation/</guid>
      <description>Like most software engineers, I review my colleagues&amp;rsquo; code. I rarely provide feedback on implementation details because developers rarely choose obviously bad implementations. I focus my attention on design rather than implementation for one simple reason: implementation details are easy to change when software is well designed. Or, from the business perspective, design is the most costly aspect of software to change, so I review for great and therefore cost-effective design.</description>
    </item>

    <item>
      <title>Reading os/exec.Cmd Output Without Race Conditions</title>
      <link>https://hackmysql.com/post/reading-os-exec-cmd-output-without-race-conditions/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/reading-os-exec-cmd-output-without-race-conditions/</guid>
      <description>Golang Weekly issue 164 features a nice article, Advanced command execution in Go with os/exec, which details several ways of working with os/exec, especially how to read STDOUT and STDERR while the command is running. This common task is commonly done wrong, where &amp;ldquo;wrong&amp;rdquo; means &amp;ldquo;the code has a race condition&amp;rdquo;. This blog post shows how to read STDOUT and STDERR from an os/exec.Cmd while it&amp;rsquo;s running and without race conditions.</description>
    </item>

    <item>
      <title>Custom MongoDB Replica Set Write Concern</title>
      <link>https://hackmysql.com/post/custom-mongodb-replica-set-write-concern/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/post/custom-mongodb-replica-set-write-concern/</guid>
      <description>One of the great things about MongoDB is write concern:
 Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongod or to replica sets or to sharded clusters.
 Awesome! I want 1 write ack from any secondary in the primary DC so when the primary crashes we&amp;rsquo;re guaranteed to have an up-to-date secondary in the primary DC ready to be elected primary.</description>
    </item>

    <item>
      <title>Go Antipatterns</title>
      <link>https://hackmysql.com/page/golang-antipatterns/</link>
      <pubDate>Sat, 03 Jun 2017 18:51:14 -0700</pubDate>

      <guid>https://hackmysql.com/page/golang-antipatterns/</guid>
      <description>Go Antipatterns These Go lang antipatterns are inspired by SQL Antipatterns. Antipattern Go code is syntactically correct, but there&amp;rsquo;s a better way that&amp;rsquo;s both functionally equivalent and idiomatic.
These are guidelines not absolutes. For example, Generic Package is common in practice and often difficult to avoid. Spending significant time trying to rename a util package can quickly amount to bikeshedding. Therefore, the antipatterns are divided into three classes: critical, important, and stylistic.</description>
    </item>

    <item>
      <title>Idiomatic Go</title>
      <link>https://hackmysql.com/page/idiomatic-go/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmysql.com/page/idiomatic-go/</guid>
      <description>Idiomatic Go Canon can·on /ˈkanən/ noun : a general law, rule, principle, or criterion by which something is judged
These texts explicitly and implicitly define idiomatic Go code. Read, memorize, and refer to them often. Use them to settle debates.
 Effective Go Golang FAQ Go at Google: Language Design in the Service of Software Engineering Go Standard Library Packages Godoc: documenting Go code Go Package Names  Recommended  Go Code Review Comments Best practices for a new Go developer Reducing Type Hierarchies  </description>
    </item>

  </channel>
</rss>
